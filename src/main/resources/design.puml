@startuml
abstract class Component {
    - name : String
    - ID : String
    # components : Component
    + {abstract} getTotalTime() : Time
    + getName()
    + getID() : String
}

abstract class java.util.Observable{

+ addObserver(ob : Observer)
+ deleterObserver(ob : Observer)
+ setChanged()
+ notifyObservers(arg0: Observable, arg1: Object)

}

interface java.util.Observer {

+ update(arg0: Observable, arg1: Object)

}


class Project extends Component{
    + getTotalTime() : Time
}

class Task extends Component implements java.util.Observer{
    + getTotalTime() : Time
    + startTime()
    + stopTime()
}

class Timer {
    - innerTimer : java.util.Timertask
    - days: int
    - minutes : int
    - seconds : int
    - passedTime : long
    + Timer(innerTimer : long )
    + startCounting()
    + stopCounting()
    + parseToHumanReading()
}

class JsonParser {
    - jsonFileName : String
    + JsonParser(fileName : String)
    + getJsonFileName() : String
    + setJsonFileName() : Sting
    + getProjectsFromJson() : Project
    + storeProjectsIntoJson()
    + storeProjectsIntoJson(fileName : String)
}

class Main {
    - readFromFile : boolean
    - fileName : String
    + {static} main()
    - parseArgs(args : List args)
}

interface MenuInterface {
    + createNewProject() : Project
    + createTask()
    + changeProject()
    + getTaskTime()
    + returnToMenu()
    + addProjectToCurrentOne()
    + saveToJson(fileName : String)
    + loadFromJson(fileName : String))
}

class Menu implements MenuInterface {
    + Menu(loadFromFile : boolean,fileName : String)
    - loadFromFile : boolean
    - fileName : String
    - currentProjects : Component
    - currentTask : Task
}

note top of Task {
    getTotalTime should call to "parseToHumanReading" Timer's method
}

JsonParser --> "version: 20210307" org.json.json
Main --> MenuInterface
Menu --> JsonParser
JsonParser *--> Component
Project "0..n" o--> Component
MenuInterface --> Component
java.util.Observable "1..n " o--> java.util.Observer
Timer --|> java.util.Observable
@enduml