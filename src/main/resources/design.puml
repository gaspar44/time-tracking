@startuml
abstract class Component {
    # father : Component
    # totalTime : long
    # startTime : LocalDateTime
    # endTime : endTime
    # tags : List<String>
    # id : int
    - {final} String name : String
    - {final} logger : Logger

    + Component(componentName : String, father : Component)
    + Component(componentName : String, father : Component, tags : String...)
    + getName() : String
    + getFather() : Component
    + getStartedTime() : LocalDateTime
    + getEndedTime() : LocalDateTime
    + setStartTime(startTime : LocalDateTime)
    + setEndTime() : LocalDateTime
    + setTotalTime(totalTime : long)
    + getTotalTime() : long
    + {abstract} acceptVisitor(visitor : Visitor)
    + setTags(tags : List<String>)
    + addTag(tag : String)
    + getId() : int
    + getTags() : List<String>
    - printTime()
    # addTimeDuration(moreDuration : long)
    + {abstract} toJson() : JSONObject
    + {abstract} toJson(treeDeep : int) : JSONObject
    + {abstract} findComponentById(id : int) : Component
}

class TimeInterval implements java.util.Observer {

    - startTime : LocalDateTime
    - endTime : LocalDateTime
    - duration : long
    - fatherTask: Task
    - logger : Logger

    + update(observable : Observable, obj : Object)
    + TimeInterval(task : Task)
    + startTime()
    + stopTime()
    + getEndTime() : LocalDateTime
    + getStartTime() : LocalDateTime
    + getCurrentDuration() : long
    + setDuration(duration : long)
    + setStartTime(startTime : LocalDateTime)
    + setEndTime(endTime : LocalDateTime)
}

abstract class java.util.Observable{

    + addObserver(ob : Observer)
    + deleterObserver(ob : Observer)
    + setChanged()
    + notifyObservers(arg0: Observable, arg1: Object)

}

interface java.util.Observer {

    + update(arg0: Observable, arg1: Object)

}

interface Visitor {
    + visitTask(task : Task)
    + visitProject(project : Project)
}


class Project extends Component{

    - components : List<Component>
    - logger : Logger

    + Project(projectName : String, father : Project)
    - init(father : Project)
    + Project(projectName : String, father : Project, tags : String...)
    + getComponents() : List<Component>
    + setComponents(components : List<Component>)
    + add(componentToAdd : Component)
    + toJson() : JSONObject
    + toJson(treeDeep : int) : JSONObject
    + findComponentById(id : int) : Component
    + acceptVisitor(visitor : Visitor)


}

class Task {

    - timeIntervalList : List<TimeInterval>
    - timeInterval : TimeInterval
    - active : boolean
    - logger : Logger

    + Task(name : String, father : Project)
    + Task(name : String, father : Project, tags : String...)
    - init(father : Project)
    + getTimeIntervalList() : List<TimeInterval>
    + isActive() : boolean
    + getTimeInterval() : TimeInterval
    + startNewInterval() : TimeInterval
    + stopActualInterval(): TimeInterval
    + setTimeInterval(endTime : LocalDateTime)
    + setTimeIntervalList(timeIntervalList : List<TimeInterval>)
    + toJson() : JSONObject
    + toJson(treeDeep : int) : JSONObject
    + findComponentById(id : int) : Component
    + acceptVisitor(visitor : Visitor)

}



class Timer {
    - logger : Logger
    - {static} instance : Timer
    - {static} date : LocalDateTime
    - {static} timer : java.util.Timer
    - {static final} TIMER_MILLISECONDS_PERIOD : int

    - Timer()
    + getTimerMillisecondsPeriod() : int
    + {static} getInstance() : Timer
    + stopCounting()


}

class JsonParser implements Visitor{
    - {static} instance : JsonParser
    - fileName : String
    - projectTree : JSONArray
    - rootJsonProject : JSONObject
    - parsedTreeFromFile : Project
    - logger : Logger

    - JsonParser()
    + {static} getInstance() : JsonParser
    + getProjectsFromJson(fileName : String) : Project
    - transformJsonArrayIntoProject(jsonArrayProjectTree : JSONArray, father : Component)
    - parseJsonElementAsTask(unparsedJsonObject : JSONObject, father : Component)
    - parseJsonElementAsProject(unparsedObject : JSONObject, father : Component)
    - storeProjectsIntoJson(storeToJson : String, project : Project) : boolean
    + setFileName(fileName : String)
    + visitTask(task : Task)
    + visitProject(project : Project)
}

class IdGenerator
{
    - {static} instance : IdGenerator
    - actualId : int

    + getInstance() : IdGenerator
    - IdGenerator()
    + getNextId() : int
    + generateId() : int
    + reset()

}

class JsonKeys
{
    + {static final} TIME_INTERVAL_KEY : String
    + {static final} CURRENT_TIME_INTERVAL_DURATION : String
    + {static final} ID_KEY : String
    + {static final} DURATION_KEY : String
    + {static final} NAME_KEY : String
    + {static final} TYPE_KEY : String
    + {static final} COMPONENT_KEY : String
    + {static final} START_TIME_KEY : String
    + {static final} END_TIME_KEY : String
    + {static final} FATHER_NAME : String
    + {static final} PROJECT_TYPE : String
    + {static final} TASK_TYPE : String
    + {static final} TAGS_KEY : String
    + {static final} ACTIVE_KEY : String


}

class DemoTree
{
    - {final} Project rootProject : Project
    - {final} Project softwareDesign : Project
    - {final} Project softwareTesting : Project
    - {final} Project dataBase : Project
    - {final} Task transportation : Task
    - {final} Project problems : Project
    - {final} Project projectTimeTracke : Project
    - {final} Task firtslist : Task
    - {final} Task secondList : Task
    - {final} Task readHandle : Task
    - {final} Task firstMilestone : Task
    - {final} logger : Logger

    + DemoTree()
    + getRootProject() : Project
    + getSoftwareDesign() : Project
    + getSoftwareTesting() : Project
    + getDataBase() : Project
    + getTransportation() : Task
    + getProblems() : Project
    + getProjectTimeTracke() : Project
    + getFirtslist() : Task
    + getSecondList() : Task
    + getReadHandle() : Task
    + getFirstMilestone() : Task

}

class WebServer{
    - {static final} PORT : int
    - {final} logger : Logger
    - root : Component
    - active : Component

    + WebServer(root : Component)
    + WebServer()
    - findComponentById(id : int) : Component

}

class SocketThread extends Thread{
    - {final} inSocked : Socket

    - SocketThread(inSocked : Socket)
    + run()
    - makeBodyAnswer(tokens : String[]) : String
    - createComponent(type : ComponentType, tokens : String[]) : String
    - makeHeaderAnswer() : String



}

class TreePrinter implements Visitor{
    - fileName : String
    - tabulatorList : List<String>
    - logger : Logger

    + TreePrinter()
    + visitTask(task : Task)
    + visitProject(project : Project)
    + setFileName(filename : String)
}

class TagSearcher implements Visitor
{
    - matchedComponents : List<Component>
    - tagsToSearch : List<String>
    - logger : Logger

    + TagSearcher()
    + TagSearcher(tagsToSearch : List<String>)
    - resetSearchElements()
    + visitTask(task : Task)
    + visitProject(project : Project)
    + getMatchedComponents() :  List<Component>
    + addSearchTag(tag : String)
    - checkIfSearchTagsAreInComponentTags(component : Component)
}

class Main {
    + {static} main(args : String[])
}

interface MenuInterface {
    + createNewProject(name : String) : Project
    + createTask(name : String) : Task
    + getRootProject() : Project
    + changeProject(fileName : String)
    + getTaskTime() : long
    + returnToMenu()
    + addProjectToCurrentOne()
    + saveToJson(fileName : String) : boolean
    + loadFromJson(fileName : String)) : boolean
    + start()
    printTree() : boolean
}


/'class ConsoleMenu implements MenuInterface {

    - rootProject : Project
    - actualProject : Project
    - actualTask : Task
    - {static} jsonParser : JsonParser

    + ConsoleMenu()
    + getRootProject() : Project
    + createNewProject(name : String) : Project
    + createTask(name : String) : Task
    + changeProject(filename : String)
    + saveToJson(fileName : String) : boolean
    + loadFromJson(fileName : String) : boolean
    + getTaskTime() : long
    + returnToMenu()
    + addProjectToCurrentOne()
    + start()
    + printTree() : boolean
    - printMenuOptions()
    - checkForJson(readFromFile : String) : boolean
}'/

note top of Task {
    getTotalTime should call to "parseToHumanReading" Timer's method
}

note top of Timer {
    must be a singleton
}

/'note right of ConsoleMenu {
    ConsoleMenu(readFromFile : String) calls ConsoleMenu(readFromFile,storeToJson)
    using the same file to input or output
}'/

Main --> MenuInterface
'ConsoleMenu --> JsonParser'
JsonParser --> "version: 20210307" org.json.json
JsonParser *--> Component
WebServer *--> SocketThread
Project "0..n" o--> Component
MenuInterface --> Component
Task o--> "0..n" TimeInterval
Task "0..n" --|> Component
java.util.Observable "1..n " o--> java.util.Observer
Timer --|> java.util.Observable
Component "1..1 " --> IdGenerator
Component *--> JsonKeys
JsonParser *--> JsonKeys
@enduml