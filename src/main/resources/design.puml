@startuml
abstract class Component {
    - name : String
    # father : Component
    # totalTime : long
    - {final} lock : ReentrantLock

    + Component(componentName : String, father : Component)
    + getName() : String
    - getHumanReadableTimeDuration(totalDuration : long) : String
    + getHumanReadableTimeDuration() : String
    + getFather() : Component
    + setTotalTime(totalTime : long)
    + getTotalTime() : long
    + {abstract} acceptVisitor(visitor : Visitor)
    # addTimeDuration(moreDuration : long)
}

class TimeInterval implements java.util.Observer {

    - startTime : LocalTime
    - endTime : LocalTime
    - duration : long
    - fatherTask: Task
    -{final} lock : ReentrantLock

    + update(observable : Observable, obj : Object)
    - printTime()
    + TimeInterval(task : Task)
    + startTime()
    + stopTime()
    + getEndTime() : LocalTime
    + getStartTime() : LocalTime
    + getCurrentDuration() : long
    + setDuration(duration : long)
    + setStartTime(startTime : LocalTime)
    + setEndTime(endTime : LocalTime)
}

abstract class java.util.Observable{

    + addObserver(ob : Observer)
    + deleterObserver(ob : Observer)
    + setChanged()
    + notifyObservers(arg0: Observable, arg1: Object)

}

interface java.util.Observer {

    + update(arg0: Observable, arg1: Object)

}

interface Visitor {
    + visitTask(task : Task)
    + visitProject(project : Project)
}


class Project extends Component{

    - components : List<Component>

    + Project(root : String, father : Project)
    + getComponents() : List<Component>
    + setComponents(components : List<Component>)
    + add(componentToAdd : Component)
    + acceptVisitor(visitor : Visitor)


}

class Task {

    - timeIntervalList : List<TimeInterval>
    - timeInterval : TimeInterval
    - startTime : LocalTime
    - endTime : LocalTime

    + Task(name : String, father : Project)
    + getTimeIntervalList() : List<TimeInterval>
    + getTimeInterval() : TimeInterval
    + startNewInterval() : TimeInterval
    + stopActualInterval(): TimeInterval
    + setEndTime(endTime : LocalTime)
    + setTimeInterval(endTime : LocalTime)
    + setTimeIntervalList(timeIntervalList : List<TimeInterval>)
    + getStartedTime() : LocalTime
    + getEndedTime() : LocalTime
    + acceptVisitor(visitor : Visitor)

}



class Timer {

    - {static} instance : Timer
    - {static} date : LocalTime
    - {static} timer : java.util.Timer
    - {static} innerTimer : TimerTask
    - {static} timeIntervals : List<Observer>
    - {static final} TIMER_MILLISECONDS_PERIOD : int

    + getTimerMillisecondsPeriod() : int
    + {static} getInstance() : Timer
    - Timer()
    + notifyObservers()
    + getDate() : LocalTime
    + addObserver(ob : Observer)
    + deleteObserver (ob : Observer)
    + stopCounting()
    + getObserver() : List<Observer>

}

class JsonParser implements Visitor{
    - {static} instance : JsonParser
    - fileName : String
    - projectTree : JSONArray
    - rootJsonProject : JSONObject
    - parsedTreeFromFile : Project

    - {static final} TIME_INTERVAL_KEY : String
    - {static final} CURRENT_TIME_INTERVAL_DURATION : String
    - {static final} DURATION_KEY : String
    - {static final} NAME_KEY : String
    - {static final} TYPE_KEY : String
    - {static final} COMPONENT_KEY : String
    - {static final} START_TIME_KEY : String
    - {static final} END_TIME_KEY : String
    - {static final} FATHER_NAME : String
    - {static final} PROJECT_TYPE : String
    - {static final} TASK_TYPE : String

    - JsonParser()
    + {static} getInstance() : JsonParser
    + getProjectsFromJson(fileName : String) : Project
    - getProjectOrComponent(jsonArrayProjectTree : JSONArray, father : Component)
    - parseTask(unparsedObject : JSONObject, father : Component)
    - parseProject(unparsedObject : JSONObject, father : Component)
    + storeProjectsIntoJson(storeToJson : String) : boolean
    + setFileName(fileName : String)
    + visitTask(task : Task)
    + visitProject(project : Project)
}

class TreePrinter implements Visitor{
    - fileName : String
    - tabulatorList : List<String>

    + TreePrinter()
    + visitTask(task : Task)
    + visitProject(project : Project)
}

class Main {
    + {static} main(args : String[])
}

interface MenuInterface {
    + createNewProject(name : String) : Project
    + createTask(name : String) : Task
    + getRootProject() : Project
    + changeProject(fileName : String)
    + getTaskTime() : long
    + returnToMenu()
    + addProjectToCurrentOne()
    + saveToJson(fileName : String) : boolean
    + loadFromJson(fileName : String)) : boolean
    + start()
    printTree() : boolean
}


class ConsoleMenu implements MenuInterface {

    - rootProject : Project
    - actualProject : Project
    - actualTask : Task
    - {static} jsonParser : JsonParser

    + ConsoleMenu()
    + getRootProject() : Project
    + createNewProject(name : String) : Project
    + createTask(name : String) : Task
    + changeProject(filename : String)
    + saveToJson(fileName : String) : boolean
    + loadFromJson(fileName : String) : boolean
    + getTaskTime() : long
    + returnToMenu()
    + addProjectToCurrentOne()
    + start()
    + printTree() : boolean
    - printMenuOptions()
    - checkForJson(readFromFile : String) : boolean
}

note top of Task {
    getTotalTime should call to "parseToHumanReading" Timer's method
}

note top of Timer {
    must be a singleton
}

note right of ConsoleMenu {
    ConsoleMenu(readFromFile : String) calls ConsoleMenu(readFromFile,storeToJson)
    using the same file to input or output
}

Main --> MenuInterface
ConsoleMenu --> JsonParser
JsonParser --> "version: 20210307" org.json.json
JsonParser *--> Component
Project "0..n" o--> Component
MenuInterface --> Component
Task o--> "0..n" TimeInterval
Task "0..n" --|> Component
java.util.Observable "1..n " o--> java.util.Observer
Timer --|> java.util.Observable

@enduml