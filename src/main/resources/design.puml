@startuml
abstract class Component {
    - name : String
    - ID : String
    # Component(name : String,father : Component)
    + {abstract} getTotalTime() : Time
    + getName()
    + getID() : String
    + accept(visitor : JsonParer)
}

class TimeInterval  implements java.util.Observer {
    - startTime : Time
    - endTime : Time
    - duration : long
    + getTime() : Long
    + TimeInterval()
    + update(ob : Observable, obj : Object )
    + getStartTime() : Time
    + getEndTime() : Time
    + getCurrentDuration() : long
    + startTime()
    + stopTime()
}

abstract class java.util.Observable{

+ addObserver(ob : Observer)
+ deleterObserver(ob : Observer)
+ setChanged()
+ notifyObservers(arg0: Observable, arg1: Object)

}

interface java.util.Observer {

+ update(arg0: Observable, arg1: Object)

}

interface Visitor {
    visitComponent(component : Component)
}


class Project extends Component{
    - components : Component
    + getTotalTime() : TimeInterval
}

class Task extends Component {
    - timeIntervals : List<TimeInterval>
    - timer : Timer
    + getTotalTime() : Time
    + startTime()
    + stopTime()
}

class Timer {
    - innerTimer : java.util.Timertask
    - timeInterval : TimeInterval
    + getInstance() : Timer
    + Timer()
    + parseToHumanReading()
    + notifyObservers()
    + addObserver(obj : Observer)
    + deleteObserver (obj : Observer)
    + stopCounting()
    + getObserver() : List<Observer>
}

class JsonParser implements Visitor{
    - jsonFileName : String
    + JsonParser(fileName : String)
    + getJsonFileName() : String
    + setJsonFileName() : Sting
    + getProjectsFromJson() : Project
    + storeProjectsIntoJson()
    + storeProjectsIntoJson(fileName : String)
    + visitComponent(component : Component)
}

class Main {
    - readFromFile : boolean
    - fileName : String
    + {static} main()
    - parseArgs(args : List args)
}

interface MenuInterface {
    + createNewProject(name: String) : Project
    + createTask(name : String)
    + changeProject()
    + getTaskTime() : long
    + returnToMenu()
    + addProjectToCurrentOne()
    + saveToJson(fileName : String) : boolean
    + loadFromJson(fileName : String))
    + start()
    + exit()
}


class ConsoleMenu implements MenuInterface {
    - componentList : List<Component> ;
    - actualProject : Project;
    - actualTask : Task;
    - readFromJson: String;
    - storeToJson : String;
    + ConsoleMenu(readFromFile : String ,storeToJson : String)
    + ConsoleMenu(readFromFile : String)
    - loadFromFile : boolean
    - fileName : String
    - currentProjects : Component
    - currentTask : Task
}

note top of Task {
    getTotalTime should call to "parseToHumanReading" Timer's method
}

note top of Timer {
    must be a singleton
}

note right of ConsoleMenu {
    ConsoleMenu(readFromFile : String) calls ConsoleMenu(readFromFile,storeToJson)
    using the same file to input or output
}

JsonParser --> "version: 20210307" org.json.json
Main --> MenuInterface
ConsoleMenu --> JsonParser
JsonParser *--> Component
Project "0..n" o--> Component
MenuInterface --> Component
Task o--> "0..n" TimeInterval
java.util.Observable "1..n " o--> java.util.Observer
Timer --|> java.util.Observable
@enduml